<template>
  <view class="feeds">
    <feeds_header :title.sync="title"></feeds_header>
    <scroll-view
        class="feeds-wrapper"
        scroll-y 
        scroll-with-animation 
        @scrolltolower="loadMore">
        <view class="black" style="width: 100%;height: 22rpx;"></view>
        <repeat for="{{ timeline }}" key="index" index="index" item="item">
            <feed_item :info.sync="item" />
        </repeat>
        <view class="loading-wrapper">
            <image style="display: block;margin: 0 auto;width: 80rpx;height: 80rpx;" src="../images/loading.svg" />
        </view>
    </scroll-view> 
  </view>
</template>

<script>
import wepy from 'wepy'
import * as services from '@/utils/services'
import FeedsHeader from '@/components/FeedsHeader'
import FeedItem from '@/components/FeedItem'
import {
    githubEventMap
} from '@/utils/constants'
import { formatMsgTime, getRandomHSL } from '@/utils/helper'

export default class Feeds extends wepy.page {
    config = {
        navigationBarTitleText: 'Feeds',
        navigationBarBackgroundColor: '#eee',
        usingComponents: {
            custom_image: '../components/nativeComponents/LazyLoadImage/index'
        }
    }

    components = {
        feeds_header: FeedsHeader,
        feed_item: FeedItem
    }

    data = {
        timeline: [],
        title: 'WepyGitHub',
        page: 1,
        loading: false
    }

    methods = {
        async loadMore() {
            await this.fetchFeeds()
        }
    }

    async onLoad() {
        if (this.loading) {
            return null
        }
        this.loading = true
        this.fetchFeeds()
        this.loading = false
    }

    async fetchFeeds() {
        const {
            statusCode,
            data = []
        } = await services.getUserTimeline(this.page)
        if (statusCode === 200) {
            this.timeline = this.timeline.concat(this.formatterData(data))
            this.page += 1
            this.$apply()
        }
    }

    formatterData(data) {
        return data.map(current => {
            const {
                actor: {
                    avatar_url,
                    login
                },
                type,
                // payload,
                created_at,
                repo
            } = current

            return {
                userName: login,
                userAvatar: avatar_url,
                event: githubEventMap[type],
                occurTime: formatMsgTime(created_at),
                repo,
                avatarBgColor: getRandomHSL()
            }
        })
    }
}
</script>

<style lang='less'>
    .feeds {
        position: fixed;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
    }
    .feeds-wrapper {
        width: 750rpx;
        height: calc(~'100% - 100rpx');

        .loading {
            font-size: 28rpx;
            color: rgba(0, 0, 0, .7);
        }
    }
</style>
