<template>
  <view class="search__page">
    <form @submit="onSeach">
      <view class="search__bar">
        <input @focus="searchFocus" @blur="searchBlur" name="search" placeholder-class="search__ph" placeholder="Search" class="search__input {{ inputFocus ? 'focus' : '' }}" />
        <button form-type="submit" class="search__btn">
          <image class="search__img" src="../images/search.png" />
        </button>
      </view>
    </form>
    <view class="tabs__wrapper">
      <view class="white__block"></view>
      <scroll-view scroll-left="{{ scrollLeft }}" class="shadow__box" scroll-x>
        <view class="tabs">
          <repeat for="{{ tabs }}" key="index" index="index" item="item">
            <view @tap="switchTab({{ index }})" class="tabs__item {{ tabIndex === index ? 'active' : '' }}">{{ item }}{{ total[index] }}</view>
          </repeat>
        </view>
      </scroll-view>
    </view>
    <swiper class="data__container" current="{{tabIndex}}" @change="onChange">
      <repeat for="{{ dataSource }}" key="index" index="dataIndex" item="data">
        <swiper-item class="swiper__item">
          <scroll-view scroll-y wx:if="{{ data.length }}" class="data__wrapper">
            <repository_detail :listData.sync="data"></repository_detail>
          </scroll-view>
          <view class="empty__block" wx:if="{{ !data.length }}">
            <view style="margin: 0 0 20rpx;">No search results</view>
            <view>(T ^ T)</view>
          </view>
        </swiper-item>
      </repeat>
    </swiper>
  </view>
</template>

<script>
import wepy from 'wepy'
import * as services from '../utils/services.js'
import { formatMsgTime } from '@/utils/helper'
import RepositoryDetail from '@/components/search/repositoryDetail'

export default class Search extends wepy.page {
  config = {
    navigationBarTitleText: '搜索'
  }

  components = {
    repository_detail: RepositoryDetail
  }

  data = {
    inputFocus: false,
    tabs: [
      'REPOSITORIES',
      'USES',
      'ISSUES',
      'CODE'
    ],
    tabIndex: 0,
    dataSource: [
      [],
      [],
      [],
      []
    ],
    total: [
      '',
      '',
      '',
      ''
    ],
    scrollLeft: 0
  }

  methods = {
    onChange(e) {
      const {
        detail: {
          current
        }
      } = e
      this.tabIndex = current
      this.scrollLeft = 20 * current
    },
    switchTab(index) {
      this.tabIndex = index
    },
    searchFocus() {
      this.inputFocus = true
    },
    searchBlur(e) {
      const {
        detail: {
          value
        }
      } = e

      if (!value) {
        this.inputFocus = false
      }
    },
    async onSeach(e) {
      const {
        detail: {
          value: {
            search = ''
          }
        }
      } = e

      const result = await services.searchRegistry(search, 1)
      if (result.statusCode === 200) {
        const {
          data: {
            total_count: totalCount,
            items
          }
        } = result
        console.log(items.map(current => Object.assign(
          {},
          current,
          {
            updatedAt: formatMsgTime(current.updated_at)
          }
        )))
        this.dataSource[0].push(...items.map(current => Object.assign(
          {},
          current,
          {
            updatedAt: formatMsgTime(current.updated_at)
          }
        )))
        this.total[0] = `(${totalCount})`
        this.$apply()
      }
    }
  }
}
</script>

<style lang='less'>
  @main_color: rgb(39, 100, 253);
  @font_color: rgb(99, 99, 99);

  .search__page {
    height: 100%;
    display: flex;
    flex-direction: column;

    .search__bar {
      display: flex;
      width: 100%;
      padding: 0 30rpx;
      box-sizing: border-box;
      margin: 20rpx 0;

      .search__ph {
        font-weight: 400;
        font-size: 42rpx;
        color: @font_color;
      }

      .search__input {
        flex-grow: 1;
        height: 80rpx;
        display: block;
        font-size: 60rpx;
        box-sizing: border-box;
        padding: 0 10rpx;
        border-bottom: 2rpx solid @main_color;

        &.focus {
          border-bottom-width: 4rpx;
        }
      }

      .search__btn {
        margin: 0;
        padding: 0;
        background: transparent;
        height: 80rpx;
        padding: 0 20rpx;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 0;

        &::after {
          border: none;
        }

        .search__img {
          width: 60rpx;
          height: 60rpx;
        }
      }
    }

    .tabs__wrapper {
      position: relative;
      padding-top: 20rpx;

      .white__block {
        position: absolute;
        top: 0;
        left: 0;
        height: 20rpx;
        width: 750rpx;
        background: #fff;
      }

      .shadow__box {
        box-shadow: 0 0rpx 15rpx 1rpx #bbb;
      }

      .tabs {
        display: flex;
        font-size: 32rpx;
        color: @font_color;
        padding: 0 30rpx;
        display: flex;

        .tabs__item {
          padding: 18rpx 20rpx;
          font-weight: 500;
          display: inline-block;

          &:active {
            background: rgba(0, 0, 0, .1);
          }

          &.active {
            color: @main_color;
            border-bottom: 4rpx solid @main_color;
          }
        }
      }
    }

    .data__container {
      flex-grow: 1;

      .data__wrapper {
        height: 100%;
        overflow: auto;
      }

      .empty__block {
        color: @main_color;
        text-align: center;
        font-size: 50rpx;
        font-weight: 400;
        padding-top: 40%;
      }
    }
  }
</style>
