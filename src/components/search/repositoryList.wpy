<template>
  <scroll-view @scrolltolower="load" scroll-y wx:if="{{ listData.length }}" class="data__wrapper">
    <repeat for="{{ listData }}" key="index" index="index" item="item">
      <view class="repository">
        <view class="avatar__wrapper">
          <image src="{{ item.avatarUrl }}" class="author__avatar" />
        </view>
        <view class="info">
          <view class="name">{{ item.fullName }}</view>
          <view class="desc">
            <view>
              <image src="../../images/star.png" class="desc__img" />
              <view>{{ item.stars }}</view>
            </view>
            <view>
              <image src="../../images/fork.png" class="desc__img" />
              <view>{{ item.forks }}</view>
            </view>
            <view>
              <image src="../../images/time.png" class="desc__img" />
              <view>{{ item.updatedAt }}</view>
            </view>
            <view>
              <image src="../../images/size.png" class="desc__img" />
              <view>{{ item.size }}</view>
            </view>
            <view>{{ item.language || '' }}</view>
          </view>
        </view>
      </view>
    </repeat>
  </scroll-view>
  <view class="empty__block" wx:if="{{ !listData.length }}">
    <view style="margin: 0 0 20rpx;">No search results</view>
    <view>(T ^ T)</view>
  </view>
</template>

<script>
import wepy from 'wepy'
import { formatMsgTime } from '@/utils/helper'
import * as services from '@/utils/services'

export default class RepositroyList extends wepy.component {
  data = {
    search: '',
    pageNo: 1,
    repositoryDataSource: [],
    temporaryRepositories: [],
    listData: []
  }

  methods = {
    async load() {
      await this.addRepository()
    }
  }

  events = {
    async search(q) {
      this.search = q
      await this.addRepository()
    }
  }

  async addRepository() {
    const result = await services.searchRegistry(this.search, this.pageNo)
    if (result.statusCode === 200) {
      const {
        data: {
          total_count: totalCount,
          items = []
        }
      } = result
      const data = items.map(current => ({
        updatedAt: formatMsgTime(current.updated_at),
        stars: current.stargazers_count,
        forks: current.forks,
        size: current.size,
        language: current.language,
        fullName: current.full_name,
        avatarUrl: current.owner.avatar_url
      }))
      if (data.length === 20) {
        this.repositoryDataSource.push(...data)
        this.temporaryRepositories = []
        this.pageNo++
      } else {
        this.temporaryRepositories = data
      }

      this.listData = this.repositoryDataSource.concat(this.temporaryRepositories)
      this.$emit('updateTotal', `(${totalCount})`, 0)
      this.$apply()
    }
  }
}
</script>

<style lang='less'>
  @main_color: rgb(39, 100, 253);
  @font_color: rgb(99, 99, 99);

  .repository {
    display: flex;

    .avatar__wrapper {
      display: flex;
      align-items: center;

      .author__avatar {
        border-radius: 50%;
        width: 100rpx;
        height: 100rpx;
        margin: auto 30rpx;
      }
    }

    .info {
      padding: 20rpx 0;

      .name {
        font-size: 32rpx;
        font-weight: 500;
        margin-bottom: 10rpx;
      }

      .desc {
        font-size: 26rpx;
        color: rgba(0, 0, 0, .7);
        display: flex;
        flex-wrap: wrap;

        >view {
          display: flex;
          align-items: center;

          >view {
            white-space: nowrap;
            padding: 0 15rpx;
          }
        }

        .desc__img {
          width: 24rpx;
          height: 24rpx;
        }
      }
    }
  }

  .data__wrapper {
    height: 100%;
    overflow: auto;
  }

  .empty__block {
    color: @main_color;
    text-align: center;
    font-size: 50rpx;
    font-weight: 400;
    padding-top: 40%;
  }
</style>
