<template>
  <scroll-view 
    scroll-top="{{scrollViewScrollTop}}"
    @scroll="handleScroll"
    scroll-y 
    scroll-x  
    class="code__wrapper">
    <loading :show.sync="showLoading" />
    <view class="measure-box">
        <repeat for="{{ sourceCode }}" key="index" index="index" item="item">
        <view class="code__line">
            <text class="index">{{ index + 1 }}</text><text>{{ item }}</text>
        </view>
        </repeat>
    </view>
    <view class="slider-wrapper">
        <slider 
            activeColor="rgb(101, 113, 230)"
            backgroundColor="#fff"
            block-size="14"
            @change="sliderChange" 
            value="{{sliderVal}}" />
    </view>
  </scroll-view>
</template>

<script>
import wepy from 'wepy'
import { request, Base64 } from '@/utils/helper'
import Loading from '@/components/Loading'

export default class CodeDetail extends wepy.page {
    config = {
        navigationBarTitleText: 'source code'
    }

    components = {
        loading: Loading
    }

    data = {
        sourceCode: [],
        showLoading: true,
        windowH: 0,
        readPercent: 0,
        scrollH: 0
    }

    computed = {
        sliderVal() {
            return this.readPercent * 100
        },
        scrollViewScrollTop() {
            return (this.scrollH - this.windowH) * this.readPercent
        }
    }

    methods = {
        sliderChange({
            detail: {
                value
            }
        }) {
            this.readPercent = value / 100
        },
        handleScroll({
            detail: {
                scrollTop,
                scrollHeight
            }
        }) {
            this.readPercent = (scrollTop / (scrollHeight - this.windowH)).toFixed(2)
            this.$apply()
        }
    }

    async onLoad(options) {
        const {
            url = ''
        } = options
        const urlReg = /https:\/\/api.github.com(.*)/
        this.windowH = this.$parent.globalData.systemInfo.windowHeight

        if (url && urlReg.exec(url)[1]) {
            const result = await request(urlReg.exec(url)[1])
            if (result.statusCode === 200) {
                const {
                    data: {
                        content = ''
                    }
                } = result

                if (content) {
                    this.sourceCode = Base64.decode(content).split('\n')
                    this.showLoading = false
                    this.$apply()
                    this.$nextTick(() => {
                        const query = wx.createSelectorQuery()
                        query.select('.measure-box').boundingClientRect()
                        query.exec(([{
                            height
                        }]) => {
                            this.scrollH = height
                        })
                    })
                }
            }
        }
    }
}
</script>

<style lang='less'>
  @main_color: rgb(39, 100, 253);

  .code__wrapper {
    overflow: scroll;
    font-size: 30rpx;
    width: 750rpx;
    height: 100vh;

    ::-webkit-scrollbar {
        width: 8rpx;
        height: 8rpx;
    }

    ::-webkit-scrollbar-track {
        border-radius: 3rpx;
        background-color: transparent;
    }

    ::-webkit-scrollbar-thumb {
        border-radius: 3rpx;
        background-color: rgba(41, 61, 238, .5);
    }

    .code__line {
      white-space: nowrap;

      .index {
        width: 100rpx;
        color: rgba(0, 0, 0, .3);
        margin-right: 20rpx;
        text-align: center;
        border-right: 1rpx solid rgba(0, 0, 0, .3);
        display: inline-block;
        width: 102rpx;
      }
    }

    .slider-wrapper {
        position: fixed;
        bottom: 60rpx;
        left: 0;
        right: 0;
        background: rgb(229, 233, 235);
        width: 660rpx;
        margin: 0 auto;
        border-radius: 8rpx;
    }
  }
</style>
