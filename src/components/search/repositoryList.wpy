<template>
  <scroll-view @scrolltolower="load" scroll-y wx:if="{{ listData.length }}" class="data__wrapper">
    <repeat for="{{ listData }}" key="index" index="index" item="item">
      <view class="repository">
        <view class="avatar__wrapper">
          <custom_image 
              @tap="go2detail({{ item.url }})"
              image-class="author__avatar" 
              img-src="{{ item.avatarUrl }}"></custom_image>
        </view>
        <view class="info">
          <view class="name">{{ item.fullName }}</view>
          <view class="desc">
            <view>
              <image src="../../images/star.png" class="desc__img" />
              <view>{{ item.stars }}</view>
            </view>
            <view>
              <image src="../../images/fork.png" class="desc__img" />
              <view>{{ item.forks }}</view>
            </view>
            <view>
              <image src="../../images/time.png" class="desc__img" />
              <view>{{ item.updatedAt }}</view>
            </view>
            <view>
              <image src="../../images/size.png" class="desc__img" />
              <view>{{ item.size }}</view>
            </view>
            <view style="color: {{item.color}};">{{ item.language || '' }}</view>
          </view>
        </view>
      </view>
    </repeat>
    <view wx:if="{{ loading }}" class="loading-wrapper">
        <image style="display: block;margin: 0 auto;width: 80rpx;height: 80rpx;" src="../../images/loading.svg" />
    </view>
  </scroll-view>
  <view class="empty__block" wx:if="{{ !listData.length }}">
    <view style="margin: 0 0 20rpx;">No search results</view>
    <view>(T ^ T)</view>
  </view>
</template>

<script>
import wepy from 'wepy'
import { formatMsgTime } from '@/utils/helper'
import * as services from '@/utils/services'
import { githubColor } from '@/utils/constants'

export default class RepositroyList extends wepy.component {
    data = {
        search: '',
        pageNo: 1,
        listData: [],
        loading: false
    }

    methods = {
        async load() {
            if (this.loading) {
                return null
            }
            await this.addRepository()
        },
        go2detail(url) {
            if (!url) {
                return null
            }
            const urlReg = /^https:\/\/api.github.com\/repos(.*)$/
            const repoPath = urlReg.exec(url)[1]
            this.$parent.$navigate({
                url: `/pages/repositoryDetail?repo_path=${repoPath}`
            })
        }
    }

    events = {
        async search(q) {
            this.search = q
            this.pageNo = 1
            await this.addRepository(true)
        }
    }

    async addRepository(type) {
        this.loading = true
        const result = await services.searchRegistry(this.search, this.pageNo)
        if (result.statusCode === 200) {
            const {
                data: {
                    total_count: totalCount,
                    items = []
                }
            } = result
            const data = items.map(current => ({
                updatedAt: formatMsgTime(current.updated_at),
                stars: current.stargazers_count,
                forks: current.forks,
                size: current.size,
                language: current.language,
                fullName: current.full_name,
                avatarUrl: current.owner.avatar_url,
                color: githubColor[current.language] ? githubColor[current.language].color : '#000',
                url: current.url
            }))
            if (type) {
                this.listData = data
            } else {
                this.listData.push(...data)
            }
            this.pageNo++

            this.$emit('updateTotal', `(${totalCount})`, 0)
        }
        this.loading = false
        this.$apply()
    }
}
</script>

<style lang='less'>
  @main_color: rgb(39, 100, 253);
  @font_color: rgb(99, 99, 99);

  .repository {
    display: flex;

    .avatar__wrapper {
      display: flex;
      align-items: center;

      .author__avatar {
        border-radius: 50%;
        width: 100rpx;
        height: 100rpx;
        margin: auto 30rpx;
        background: rgba(0, 0, 0, .1);
      }
    }

    .info {
      padding: 20rpx 0;

      .name {
        font-size: 32rpx;
        font-weight: 500;
        margin-bottom: 10rpx;
      }

      .desc {
        font-size: 26rpx;
        color: rgba(0, 0, 0, .7);
        display: flex;
        flex-wrap: wrap;

        >view {
          display: flex;
          align-items: center;

          >view {
            white-space: nowrap;
            padding: 0 15rpx;
          }
        }

        .desc__img {
          width: 24rpx;
          height: 24rpx;
        }
      }
    }
  }

  .data__wrapper {
    height: 100%;
    overflow: auto;
  }

  .empty__block {
    color: @main_color;
    text-align: center;
    font-size: 50rpx;
    font-weight: 400;
    padding-top: 40%;
  }
</style>
